名称：
	call_other() - 呼叫在另一个物件中的函式。
语法：
	mixed call_other( mixed ob, string func, ... );
	mixed call_other( mixed ob, array args ); 
	mixed call_other( array obs, string func, ... ); 
	mixed call_other( array obs, array args ); 

	混合 call_other( 混合 物件, 字串 函式, ... );
	混合 call_other( 混合 物件, 阵列 参数 ); 
	混合 call_other( 阵列 物件, 字串 函式, ... ); 
	混合 call_other( 阵列 物件, 阵列 参数 ); 
用法：
	ob 是一个物件指标，或是字串档名〈合于 find_object()〉。obs 是一个
	物件指标与字串的阵列。第一个参数使用阵列会对阵列中的每一个元素作
	call_other，并传回结果的阵列。
	如果阵列用于 args，则第一个元素是函式名称，剩余的是参数；即：

	call_other(ob, ({ "foo", 1, 3, 5 }))
	与
	call_other(ob, "foo", 1, 3, 5)

	相同。这样会以 (1, 3, 5) 为参数，呼叫物件 ob 中的函式 foo()。
	call_other() 的传回值就是 foo() 函式的传回值。如果 ob 是一个物件的
	阵列，则传回值就是传回值的阵列。

	这里有个更好的方法使用 call_other：

	call_other(x, "y", z, ...) 就如同：

	x->y(z, ...)

	即：

	call_other(ob, "query_name");

	可以写成：

	ob->query_name();

	写出 call_other 呼叫主要用于函式名称存于一个变数中，即：

	void do_test(string fname, int x) {
		call_other(fname, "test_" + x);
	}

	以阵列作为第一个参数的例子：

	users()->quit();
作者：
	Tim Hollebeek  Beek@ZorkMUD, Lima Bean, IdeaExchange, and elsewhere
翻译：
	spock@muds.net		2000.May.21.	v22 版
