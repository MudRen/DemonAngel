名称：
	printf - 转换成指定格式的输出结果。
语法：
	void printf( string format, ... );

	无传回值 printf( 字串 格式, ... );
用法：
	输出结果会送给 this_user()，与 write() 外部函式的作用一样。
	本函式由 Sean A Reith 撰写。

	目前的版本支援以下的修饰子 (modifier)：

	" "	在正整数之前放入一个空格。

	"+"	在正整数之前放入一个 + 号。

	"-"	对齐栏位 (field) 的左边。

	请注意：系统内标准的 printf() 预设是对齐右边，但是对主要以字串为基
	础的语言来说，这样非常不自然。在此为了相容性而保留此一特性。

	"|"	对齐栏位的中心。

	"="	如果字串长度比栏位大小还长，使用纵列模式 (column mode)。在
		此只对字串有效，其他的型态一律无效。纵列模式中，字串中的字
		会很神奇地自动自动换行 (wrap)。

	"#"	表格模式。在栏位之内，字串中的每一个字会换一行〈即每个字后
		面加上“\n”〉。只对字串有效。

	数字	用整数指定栏位大小。用“*”代替整数则使用参数指定栏位大小。
		如果数字是 0，则此栏除了资料以外就以空值 (zeros) 填满。如果
		数字不是 0，此栏除了资料以外将放入空白字元 (space) 或是另外
		指定的字元。

	"."数字	指定输出的精确度为该数字。普通的字串在此之后则被截断〈如果
		精确度大于栏位长度，则栏位长度变为精确度〉。表格则使用精确
		度指定纵列的总数〈如果不指定精确度，则表格会自动计算最适合
		的输出结果〉。精确度对于其他的资料型态无效。

	":"数字	数字指定 fs 和精确度，如果数字是 0，则原来用以填满栏位的空
		格就代以空值 (zeros)。

	"@"	参数为一个阵列。其他除了 @ 以外，对应的格式资料亦将用于阵列
		中的每一个元素。

	"'X'"	单引号 (') 中的字元用以填满整个栏位中资料以外的空间。〈预设
		值是空白字元〉〈如果同时在栏位大小之前指定一个空值，又指定 
		'X' 字串填满栏位，则以后者为准〉注意：如果欲填满的字串中要
		使用单引号 (')、双引号 (") 或倒斜线 (\)，您必须使用“\'”、
		“\"”或“\\”以避开编译器的检查。

以下是型态指定子 (type specifier)：

	%	此处不指定任何参数，而以 % 输出，忽略所有的修饰子。

	O	参数为 LPC 资料型态。此格式适合用来印出任何型态的资料〈主要
		用于除错〉

	s	参数为字串。

	d 或 i	整数参数以十进位印出。

	c	整数参数以字元印出。

	o	整数参数以八进位印出。

	x	整数参数以十六进位印出。

	X	整数参数以十六进位印出〈A 到 F 以大写印出〉。

	f	浮点数。

参考：
	sscanf, sprintf
作者：
	Tim Hollebeek  Beek@ZorkMUD, Lima Bean, IdeaExchange, and elsewhere
翻译：
	spock@muds.net		2000.Jun.27.	v22 版
