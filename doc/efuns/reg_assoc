名称：
	reg_assoc - 一个正规样式子字串撷取器 (regular pattern substring 
		    extractor)。
语法：
	array reg_assoc( string str, string array pat_arr, array tok_arr );
	array reg_assoc( string str, string array pat_arr, array tok_arr, 
		mixed def );

	阵列 reg_assoc( 字串 字串, 字串 阵列 样式阵列, 阵列 剖析阵列 );
	阵列 reg_assoc( 字串 字串, 字串 阵列 样式阵列, 阵列 剖析阵列, 
		混合 预设值 );
用法：
	reg_assoc 将一个字串分段 (explode) 为一些符合给定“pat_arr”正规表
	示 (regular expression) 样式字串的子字串 (substring)，并且和给定的
	剖析单元 (token)“tok_arr”相联结。如果指定“def”（预设值为 0）的
	话，它则会和一个不符合者相联结。传回值是含有二个子阵列的阵列，第一
        个是一个如下格式的阵列：

	({ 不符合 1, 符合 1, 不符合 2, 符合 2, ...,
		不符合 n, 符合 n, 不符合 n+1 })

	而第二个则含有依序对应于符合者的剖析单元：

	({ def, 对应于符合 1 的剖析单元, ..., def, 
		对应于符合 n 的剖析单元, def })。
                 
	“pat_arr”和“tok_arr”的大小必须一样，“tok_arr”的第 i 个元素是
	对应于“pat_arr”的第 i 个元素。“pat_arr”只可以含有字串。

	如果“pat_arr”（并且“tok_arr”）的大小是零的话，则只会传回
	({ ({ str }), ({ def }) })。
例子：
	#define STRING_PAT "\"(\\\\.|[^\\\"])*\""
	#define NUM_PAT "[0-9]+"

	#define F_STRING 1
	#define F_NUM 2

	reg_assoc("Blah \"blah\" test 203 hhh j 308 \"bacdcd\b\"acb",
	({ STRING_PAT, NUM_PAT }), ({ F_STRING, F_NUM }), "no-match")

	将会传回

	({ ({ "Blah ", "\"blah\"", " test ", "203", " hhh j ", "308", " ",
		"\"bacdcd\b\"", "acb" }),
	({ "no-match", F_STRING, "no-match", F_NUM, "no-match", F_NUM,
		"no-match", F_STRING, "no-match" }) })
作者：
	Tim Hollebeek  Beek@ZorkMUD, Lima Bean, IdeaExchange, and elsewhere
原译：
	Kenny@Broken.History	97.Jul.26
校订：
	spock@muds.net		2000.Aug.27.	v22 版
